{{ if eq .chezmoi.os "windows" -}}
# Script to install and configure new machine.
# This file should be ran as elevated Administrator.
#
# This script needs to be idempotent, that is, it needs to be runnable multiple
# times without producing an error on consequent runs.

. "$PSScriptRoot/config_user.ps1"

if (test-sandbox) {
	# Install WinGet.
	# Based on: https://learn.microsoft.com/en-us/windows/package-manager/winget/#install-winget-on-windows-sandbox
	$progressPreference = 'silentlyContinue'
	Write-Information "Downloading WinGet and its dependencies..."
	Invoke-WebRequest -Uri https://aka.ms/getwinget -OutFile Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle
	Invoke-WebRequest -Uri https://aka.ms/Microsoft.VCLibs.x64.14.00.Desktop.appx -OutFile Microsoft.VCLibs.x64.14.00.Desktop.appx
	Invoke-WebRequest -Uri https://github.com/microsoft/microsoft-ui-xaml/releases/download/v2.7.3/Microsoft.UI.Xaml.2.7.x64.appx -OutFile Microsoft.UI.Xaml.2.7.x64.appx
	Add-AppxPackage Microsoft.VCLibs.x64.14.00.Desktop.appx
	Add-AppxPackage Microsoft.UI.Xaml.2.7.x64.appx
	Add-AppxPackage Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle
}

# Self-elevate the script if required.
if (-Not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator')) {
	if ([int](Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber) -ge 6000) {
		$CommandLine = "-NoExit -File `"" + $MyInvocation.MyCommand.Path + "`" " + $MyInvocation.UnboundArguments
		Start-Process -FilePath PowerShell.exe -Verb Runas -ArgumentList $CommandLine
		Exit
	}
}

# Enable Developer Mode to allow regular users to create symbolic links.
Set-itemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock" AllowDevelopmentWithoutDevLicense 1 -Type DWord

# Disable Storing my activity history on this device (Known as Timeline on Windows 10).
Set-itemProperty "HKLM:\SOFTWARE\Policies\Microsoft\Windows\System" PublishUserActivities 0 -Type DWord

# Microsoft Defender Antivirus will always prompt before sending automatic sample
# submission to Microsoft.
Set-MpPreference -SubmitSamplesConsent 0

# Install Chocolatey.
# This is safe even if Chocolatey is already installed. 
Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

# Configure Chocolatey.
choco feature enable -n allowGlobalConfirmation

# Install packages.
winget install Microsoft.PowerShell
winget install vim.vim
winget install Neovim.Neovim
winget install CrystalRich.LockHunter
winget install 7zip.7zip
winget install Microsoft.WindowsTerminal
winget install WinSCP.WinSCP
winget install Microsoft.PowerToys

# Install Windows features
try {
	Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0
}
catch [System.Runtime.InteropServices.COMException] {
	if ($_.Exception.ErrorCode -eq 0x80070422) {
		Write-Warning "Windows capability SSH Client not installed. Installing Windows capabilities is not supported in Windows Sandbox."
	}
}
{{ end -}}
