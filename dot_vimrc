" Configuration file for vim
" Written for Debian GNU/Linux by W.Akkerman <wakkerma@debian.org>
" Some modifications by J.H.M. Dassen <jdassen@wi.LeidenUniv.nl>
" Modified by high / John Ericson.

" Functions

" Copy With Syntax Highlighting.
" https://vi.stackexchange.com/a/18979
"
" Run like this:
"  :HtmlClip
function! CopyFormatted(line1, line2)
    execute a:line1 . "," . a:line2 . "TOhtml"
    %yank *
    !start /min powershell -noprofile "gcb | scb -as"
    bwipeout!
endfunction

command! -range=% HtmlClip silent call CopyFormatted(<line1>,<line2>)

" https://stackoverflow.com/a/57020870/2903596
function! IsWSL()
  if has("unix")
    let lines = readfile("/proc/version")
    if lines[0] =~ "microsoft"
      return 1
    endif
  endif
  return 0
endfunction


" To make nvim work with my listchars with special characters. nvim requires .vimrc to be in utf-8 format.
set encoding=utf-8

" Set english language
"
	
" Help language
set helplang=en
	
" Vim language
" This doesn't work on my installation of Vim x64.
"language en

" Sets the language in the menubar of gvim to english instead of the default
" on the system. This must be done before loading menus, switching on filetype
" detection or syntax highlighting.
set langmenu=none


" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible	" Use Vim defaults (much better!)
" use Q for formatting, not ex-mode:
map Q gq
set backspace=2		" allow backspacing over everything in insert mode

" Now we set some defaults for the editor
set autoindent		" always set autoindenting on
set textwidth=0	" Don't wrap words by default
						" Good to have setuped to 75 when writing mail.
"set backup		" keep a backup file
set nobackup	" Don't keep a backup file
set viminfo='20,\"50	" read/write a .viminfo file, don't store more than
							" 50 lines of registers
set history=50    " keep 50 lines of command line history

" Tabs
set ts=3          " number of spaces a <Tab> in the text stands for
set sw=3          " number of spaces used for each step of (auto)indent
"set sts=3         " if non-zero, number of spaces to insert for a <Tab>
set nosta sta     " a <Tab> in an indent inserts 'shiftwidth' spaces
"set noet	et       " expand <Tab> to spaces in Insert mode
set nosi	si       " do clever autoindenting
set nocin cin     " enable specific indenting for C code 

if IsWSL() || exists("$SSH_CONNECTION")
  set mouse=v        " Use visual selection when not running locally, such as WSL/SSH.
else
  set mouse=a			" enable mouse
endif

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

" Make vim consult the external termcap entries first, so we get all of
" Debian's termcap settings correct. This will be fixed upstream in 5.4
" This doesn't work in vim 6.4 in win32 / High
"set nottybuiltin term=$TERM

" We know xterm-debian is a color terminal
"if &term =~ "xterm-debian" || &term =~ "xterm-xfree86"
"  set t_Co=16
"  set t_Sf=[3%dm
"  set t_Sb=[4%dm
"endif

" Vim5 comes with syntaxhighlighting. 
if has("syntax")
  syntax on		" Default to no syntax highlightning 
endif

" Debian uses compressed helpfiles. We must inform vim that the main
" helpfiles is compressed. Other helpfiles are stated in the tags-file.
" This isn't needed on my windows install.
"set helpfile=$VIMRUNTIME/doc/help.txt.gz

if has("autocmd")

" Set some sensible defaults for editing C-files
augroup cprog
  " Remove all cprog autocommands
  au!

  " When starting to edit a file:
  "   For *.c and *.h files set formatting of comments and set C-indenting on.
  "   For other files switch it off.
  "   Don't change the order, it's important that the line with * comes first.
  autocmd BufRead *       set formatoptions=tcql nocindent comments&
  autocmd BufRead *.c,*.h set formatoptions=croql cindent comments=sr:/*,mb:*,el:*/,://
augroup END

" Also, support editing of gzip-compressed files. DO NOT REMOVE THIS!
" This is also used when loading the compressed helpfiles.
augroup gzip
  " Remove all gzip autocommands
  au!

  " Enable editing of gzipped files
  "	  read:	set binary mode before reading the file
  "		uncompress text in buffer after reading
  "	 write:	compress file after writing
  "	append:	uncompress file, append, compress file
  autocmd BufReadPre,FileReadPre	*.gz set bin
  autocmd BufReadPre,FileReadPre	*.gz let ch_save = &ch|set ch=2
  autocmd BufReadPost,FileReadPost	*.gz '[,']!gunzip
  autocmd BufReadPost,FileReadPost	*.gz set nobin
  autocmd BufReadPost,FileReadPost	*.gz let &ch = ch_save|unlet ch_save
  autocmd BufReadPost,FileReadPost	*.gz execute ":doautocmd BufReadPost " . expand("%:r")

  autocmd BufWritePost,FileWritePost	*.gz !mv <afile> <afile>:r
  autocmd BufWritePost,FileWritePost	*.gz !gzip <afile>:r

  autocmd FileAppendPre			*.gz !gunzip <afile>
  autocmd FileAppendPre			*.gz !mv <afile>:r <afile>
  autocmd FileAppendPost		*.gz !mv <afile> <afile>:r
  autocmd FileAppendPost		*.gz !gzip <afile>:r
augroup END

augroup bzip2
  " Remove all bzip2 autocommands
  au!

  " Enable editing of bzipped files
  "       read: set binary mode before reading the file
  "             uncompress text in buffer after reading
  "      write: compress file after writing
  "     append: uncompress file, append, compress file
  autocmd BufReadPre,FileReadPre        *.bz2 set bin
  autocmd BufReadPre,FileReadPre        *.bz2 let ch_save = &ch|set ch=2
  autocmd BufReadPost,FileReadPost      *.bz2 |'[,']!bunzip2
  autocmd BufReadPost,FileReadPost      *.bz2 let &ch = ch_save|unlet ch_save
  autocmd BufReadPost,FileReadPost      *.bz2 execute ":doautocmd BufReadPost " . expand("%:r")

  autocmd BufWritePost,FileWritePost    *.bz2 !mv <afile> <afile>:r
  autocmd BufWritePost,FileWritePost    *.bz2 !bzip2 <afile>:r

  autocmd FileAppendPre                 *.bz2 !bunzip2 <afile>
  autocmd FileAppendPre                 *.bz2 !mv <afile>:r <afile>
  autocmd FileAppendPost                *.bz2 !mv <afile> <afile>:r
  autocmd FileAppendPost                *.bz2 !bzip2 -9 --repetitive-best <afile>:r
augroup END

endif " has ("autocmd")

" The following are commented out as they cause vim to behave a lot
" different from regular vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
set ruler		" Show the line and column numbers of the cursor 
"set ignorecase		" Do case insensitive matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make

set wrap    " long lines wrap.
"set lbr     " wrap long lines at a character in 'breakat' (local to window).
"set brk=\ \ " which characters might cause a line break.

let g:LargeFile=100

"colo default

set incsearch " Search while you type.

set nolist " Don't Show special characters like tab and newlines.
set listchars=tab:Â¬\ ,eol:Â¶

set colorcolumn=81 " Displays a line at 80 characters.
" Set color of colorcolumn to very dark blue. Overrides colorscheme.
" http://stackoverflow.com/questions/2440149/override-colorscheme/7383051#7383051
" autocmd ColorScheme * hi ColorColumn ctermbg=darkgrey guibg=#051021

"set noswapfile

" For swap files. Only store files here if the directories exists.
" If it doesn't exist Vim will say 'Unable to open cache file' when opening
" file.
" /Temp is for Windows.
set backupdir=$HOME/.tmp/vim/,/tmp/,/Temp//
set directory=$HOME/.tmp/vim/,/tmp/,/Temp/
set undodir=$HOME/.tmp/vim/,/tmp/,/Temp//

" Activate modeline.
set modeline

" Be able to set specific settings per file in ftdetect.
filetype plugin on


" Install plugins
call plug#begin()

" Framework for writing vim plugins in Deno (Javascript runtime).
Plug 'vim-denops/denops.vim'

" Completion framework. Replacement of neocomplete.
Plug 'Shougo/ddc.vim'

" Install your UIs
Plug 'Shougo/ddc-ui-native'

" Install your sources
Plug 'Shougo/ddc-source-around'

" Install your filters
Plug 'Shougo/ddc-matcher_head'
Plug 'Shougo/ddc-sorter_rank'

call plug#end()

" Customize global ddc settings.
" Based on config from: https://github.com/Shougo/ddc.vim/blob/main/doc/ddc.txt#L563

" Set the default ui.
" NOTE: native ui.
" https://github.com/Shougo/ddc-ui-native
call ddc#custom#patch_global('ui', 'native')

" Use around source. This gives you auto completion when editing files.
" https://github.com/Shougo/ddc-source-around
call ddc#custom#patch_global('sources', ['around'])

" Use matcher_head and sorter_rank.
" https://github.com/Shougo/ddc-matcher_head
" https://github.com/Shougo/ddc-sorter_rank
call ddc#custom#patch_global('sourceOptions', #{
      \   _: #{
      \     matchers: ['matcher_head'],
      \     sorters: ['sorter_rank']},
      \   },
      \ )

" Change source options
call ddc#custom#patch_global('sourceOptions', #{
      \   around: #{ mark: 'A' },
      \ })
call ddc#custom#patch_global('sourceParams', #{
      \   around: #{ maxSize: 500 },
      \ })

" Customize settings on a filetype
call ddc#custom#patch_filetype(
    \   ['c', 'cpp'], 'sources', ['around', 'clangd']
    \ )
call ddc#custom#patch_filetype(['c', 'cpp'], 'sourceOptions', #{
    \   clangd: #{ mark: 'C' },
    \ })
call ddc#custom#patch_filetype('markdown', 'sourceParams', #{
    \   around: #{ maxSize: 100 },
    \ })

" Mappings

" <TAB>: completion.
" NOTE: It does not work for pum.vim
inoremap <expr> <TAB>
\ pumvisible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()

" <S-TAB>: completion back.
" NOTE: It does not work for pum.vim
inoremap <expr> <S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'

" Use ddc.
call ddc#enable()



" Auto copy the mouse selection
" https://vim.fandom.com/wiki/Auto_copy_the_mouse_selection

" Not pleased with how Method 1 works. Method 2 works a lot better. 
" Method 1 (for Xwindows and mswindows), this map is different from the one shown in vim documentation:

" Only copies in Vim not, to System wide clipboard on Windows.
":noremap <LeftRelease> "+y<LeftRelease>
" Copies to System wide clipboard on Windows.
":noremap <LeftRelease> "*y<LeftRelease>

" Method 2 (works only on ms-windows vim63):
:set guioptions+=a

" Disable annoying beeping
set noerrorbells
set vb t_vb=

set bg=dark			" background (light/dark). Reload syntax to initialize
						" settings.

" Make vim use the OS clipboard by default.
set clipboard^=unnamed,unnamedplus

